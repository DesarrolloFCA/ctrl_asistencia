<?php
/**
 * Created by IntelliJ IDEA.
 * User: ablanco
 * Date: 24/06/15
 * Time: 17:13
 */

namespace SIU\AraiJsonParser\Version\Constraints;


class VersionConstraint extends SpecificConstraint
{
    private $operator;
    private $version;

    /**
     * Sets operator and version to compare a package with
     *
     * @param string $operator A comparison operator
     * @param string $version A version to compare to
     * @param string $prettyString The version string as it appears in the json
     */
    public function __construct($operator, $version, $prettyString = '')
    {
        if ('=' === $operator) {
            $operator = '==';
        }

        if ('<>' === $operator) {
            $operator = '!=';
        }

        $this->operator = $operator;
        $this->version = $version;
        parent::__construct($prettyString);
    }

    public function versionCompare($a, $b, $operator)
    {
        return version_compare($a, $b, $operator);
    }

    /**
     * @param  VersionConstraint $provider
     * @return bool
     */
    public function matchSpecific(VersionConstraint $provider)
    {
        static $cache = array();
        if (isset($cache[$this->operator][$this->version][$provider->operator][$provider->version])) {
            return $cache[$this->operator][$this->version][$provider->operator][$provider->version];
        }

        return $cache[$this->operator][$this->version][$provider->operator][$provider->version] =
            $this->doMatchSpecific($provider);
    }

    /**
     * @param  VersionConstraint $provider
     * @return bool
     */
    private function doMatchSpecific(VersionConstraint $provider)
    {
        $noEqualOp = str_replace('=', '', $this->operator);
        $providerNoEqualOp = str_replace('=', '', $provider->operator);

        $isEqualOp = '==' === $this->operator;
        $isNonEqualOp = '!=' === $this->operator;
        $isProviderEqualOp = '==' === $provider->operator;
        $isProviderNonEqualOp = '!=' === $provider->operator;

        // '!=' operator is match when other operator is not '==' operator or version is not match
        // these kinds of comparisons always have a solution
        if ($isNonEqualOp || $isProviderNonEqualOp) {
            return !$isEqualOp && !$isProviderEqualOp
            || $this->versionCompare($provider->version, $this->version, '!=');
        }

        // an example for the condition is <= 2.0 & < 1.0
        // these kinds of comparisons always have a solution
        if ($this->operator != '==' && $noEqualOp == $providerNoEqualOp) {
            return true;
        }

        if ($this->versionCompare($provider->version, $this->version, $this->operator)) {
            // special case, e.g. require >= 1.0 and provide < 1.0
            // 1.0 >= 1.0 but 1.0 is outside of the provided interval
            if ($provider->version == $this->version && $provider->operator == $providerNoEqualOp && $this->operator != $noEqualOp) {
                return false;
            }

            return true;
        }

        return false;
    }

    public function __toString()
    {
        return $this->operator.' '.$this->version;
    }
}