<?php
/**
 * Created by IntelliJ IDEA.
 * User: ablanco
 * Date: 24/06/15
 * Time: 17:14
 */

namespace SIU\AraiJsonParser\Version\Constraints;


abstract class SpecificConstraint implements ConstraintInterface
{
    protected $prettyString;

    public function __construct($prettyString)
    {
        $this->prettyString = $prettyString;
    }

    public function matches(ConstraintInterface $provider)
    {
        if ($provider instanceof $this) {
            return $this->matchSpecific($provider);
        }

        return true;
    }

    public function setPrettyString($prettyString)
    {
        $this->prettyString = $prettyString;
    }

    public function getPrettyString()
    {
        if ($this->prettyString) {
            return $this->prettyString;
        }

        return $this->__toString();
    }

//    abstract public function matchSpecific(SpecificConstraint $provider);
    // implementations must implement a method of this format:
    // not declared abstract here because type hinting violates parameter coherence (TODO right word?)
    // public function matchSpecific(<SpecificConstraintType> $provider);
}